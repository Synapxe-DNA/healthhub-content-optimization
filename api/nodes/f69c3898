{
  "code": "def update_edges_dataframe(\n    first_level_clustered_nodes: pd.DataFrame, final_predicted_cluster: pd.DataFrame\n) -> Tuple[pd.DataFrame, pd.DataFrame]:\n    \"\"\"\n    Update the edges DataFrame with new clusters and filter out unclustered nodes.\n\n    This function updates the edges DataFrame (first_level_clustered_nodes) with new cluster assignments (final_predicted_cluster) and keywords from the updated\n    prediction clusters. It also identifies nodes that remain unclustered (single article clusters)\n    and prepares a DataFrame for these unclustered nodes with relevant columns.\n\n    Parameters:\n    ----------\n    first_level_clustered_nodes (pd.DataFrame):\n        A DataFrame containing the original clustered nodes with columns:\n        - node_1_id: ID of the first node\n        - node_2_id: ID of the second node\n        - other columns as needed\n\n    final_predicted_cluster (pd.DataFrame):\n        A DataFrame containing the updated prediction clusters with columns:\n        - id: Node ID\n        - title: Title of the node\n        - new_cluster: New cluster assignment\n        - cluster_kws: Keywords associated with the cluster\n        - url: URL of the node (optional, will be dropped)\n        - cluster: First level cluster assignment (optional, will be dropped)\n        - body_content: Content of the node (optional, will be dropped)\n\n    Returns:\n    -------\n    final_unclustered_nodes (pd.DataFrame):\n        A DataFrame containing the nodes that remain unclustered, with columns:\n        - node_id: ID of the unclustered node\n        - node_title: Title of the unclustered node\n        - node_community: Community assignment of the unclustered node\n\n    final_clustered_nodes (pd.DataFrame):\n        A DataFrame containing the updated clustered nodes with new cluster assignments and keywords, filtered to remove rows with missing keywords. Columns include:\n        - node_1_id: ID of the first node\n        - node_2_id: ID of the second node\n        - node_1_pred_cluster_new: New predicted cluster for the first node\n        - node_2_pred_cluster_new: New predicted cluster for the second node\n        - other columns from the merged DataFrame\n    \"\"\"\n    unique_new_clusters = final_predicted_cluster[\"new_cluster\"].value_counts()\n    single_article_cluster = unique_new_clusters[unique_new_clusters == 1].index\n    group_article_cluster = unique_new_clusters[unique_new_clusters > 1].index\n    unclustered_df = final_predicted_cluster[\n        final_predicted_cluster[\"new_cluster\"].isin(single_article_cluster)\n    ]\n    unclustered_df = unclustered_df.rename(\n        columns={\n            \"id\": \"node_id\",\n            \"title\": \"node_title\",\n            \"new_cluster\": \"node_community\",\n        }\n    )\n    final_unclustered_nodes = unclustered_df.drop(\n        columns=[\"url\", \"cluster\", \"body_content\", \"cluster_kws\"]\n    )\n\n    clustered_df_new = pd.merge(\n        first_level_clustered_nodes,\n        final_predicted_cluster[[\"id\", \"new_cluster\", \"cluster_kws\"]],\n        left_on=\"node_1_id\",\n        right_on=\"id\",\n        how=\"left\",\n    ).merge(\n        final_predicted_cluster[[\"id\", \"new_cluster\", \"cluster_kws\"]],\n        left_on=\"node_2_id\",\n        right_on=\"id\",\n        how=\"left\",\n        suffixes=(\"_1\", \"_2\"),\n    )\n\n    final_clustered_nodes = clustered_df_new.drop(\n        columns=[\"id_1\", \"id_2\", \"node_1_pred_cluster\", \"node_2_pred_cluster\"]\n    )\n    final_clustered_nodes = final_clustered_nodes.rename(\n        columns={\n            \"new_cluster_1\": \"node_1_pred_cluster_new\",\n            \"new_cluster_2\": \"node_2_pred_cluster_new\",\n            \"cluster_kws_1\": \"node_1_cluster_kws\",\n            \"cluster_kws_2\": \"node_2_cluster_kws\",\n        }\n    )\n    final_clustered_nodes = final_clustered_nodes[\n        final_clustered_nodes[\"node_1_pred_cluster_new\"].isin(group_article_cluster)\n        | final_clustered_nodes[\"node_2_pred_cluster_new\"].isin(group_article_cluster)\n    ]\n\n    return final_unclustered_nodes, final_clustered_nodes\n",
  "filepath": "content-optimization/src/content_optimization/pipelines/clustering/nodes.py",
  "parameters": {},
  "run_command": "kedro run --to-nodes='update_edges_dataframe_node'",
  "inputs": [
    "first_level_clustered_nodes",
    "final_predicted_cluster"
  ],
  "outputs": [
    "final_unclustered_nodes",
    "final_clustered_nodes"
  ]
}