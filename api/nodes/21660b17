{
  "code": "def generate_clusters(\n    merged_df_with_groundtruth: pd.DataFrame,\n    neo4j_config: Dict[str, str],\n    weight_title: float,\n    weight_cat: float,\n    weight_desc: float,\n    weight_body: float,\n    weight_combined: float,\n    weight_kws: float,\n    set_threshold: Union[None, float],\n) -> Tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame, pd.DataFrame, pd.DataFrame]:\n    \"\"\"\n    Generates the first level of clustering using graph-based method\n\n    This function takes in a Dataframe of documents (merged_df_with_groundtruth), connects to a Neo4j database,\n    creates graph nodes for each document, compute similarity scores between articles for each feature, combines similarities based on various weights,\n    and detects communities via louvain community detection to form clusters.\n\n    It returns the predicted clusters, clustered nodes, unclustered nodes, clustering metrics and cluster size for first level clustering.\n\n    Parameters:\n    merged_df_with_groundtruth (pd.DataFrame): DataFrame containing the documents with ground truth.\n    neo4j_config (dict): Configuration dictionary for connecting to Neo4j. Should contain keys 'uri' and 'database'.\n                         Ensure `conf/base/credentials.yml` has `neo4j_credentials` with `username` and `password`\n    weight_title (float): Weight for the title similarity. Value should come from `parameters_clustering.yml`.\n    weight_cat (float): Weight for the category similarity. Value should come from `parameters_clustering.yml`.\n    weight_desc (float): Weight for the meta description similarity. Value should come from `parameters_clustering.yml`.\n    weight_body (float): Weight for the content body similarity. Value should come from `parameters_clustering.yml`.\n    weight_combined (float): Weight for the combined embeddings similarity. Value should come from `parameters_clustering.yml`.\n    weight_kws (float): Weight for the keywords similarity. Value should come from `parameters_clustering.yml`.\n    set_threshold (Union[None, float]): Threshold for clustering. If None, it is set based on the median threshold of combined similarities.\n\n    Returns:\n    first_level_pred_cluster (pd.DataFrame): DataFrame of predicted clusters.\n    first_level_clustered_nodes (pd.DataFrame): DataFrame of nodes that were clustered.\n    first_level_unclustered_nodes (pd.DataFrame): DataFrame of nodes that were not clustered.\n    first_level_metrics (pd.DataFrame): DataFrame containing clustering metrics. Including no. of clusters, min & max cluster size, no. of unclustered articles and each of the weights.\n    first_level_cluster_size (pd.DataFrame): DataFrame containing the size of each cluster in bins of size 5.\n\n    Raises:\n    Neo4jError: If an error occurs with Neo4j database operations.\n\n    \"\"\"\n    conf_path = str(str(Path(os.getcwd()) / settings.CONF_SOURCE))\n    config_loader = OmegaConfigLoader(conf_source=conf_path)\n    credentials = config_loader[\"credentials\"]\n\n    neo4j_auth = {\n        \"uri\": neo4j_config[\"uri\"],\n        \"auth\": (\n            credentials[\"neo4j_credentials\"][\"username\"],\n            credentials[\"neo4j_credentials\"][\"password\"],\n        ),\n        \"database\": neo4j_config[\"database\"],\n    }\n\n    documents = merged_df_with_groundtruth.to_dict(orient=\"records\")\n    print(f\"Number of articles: {len(documents)}\")\n\n    try:\n        with GraphDatabase.driver(**neo4j_auth) as driver:\n            with driver.session() as session:\n                session.execute_write(clear_db)  # Clear the database\n                for doc in documents:\n                    session.execute_write(create_graph_nodes, doc)\n                combined_similarities = combine_similarities(\n                    session,\n                    weight_title,\n                    weight_cat,\n                    weight_desc,\n                    weight_body,\n                    weight_combined,\n                    weight_kws,\n                )\n                if set_threshold:\n                    threshold = set_threshold\n                else:\n                    threshold = median_threshold(combined_similarities)\n                session.execute_write(\n                    create_sim_edges, combined_similarities, threshold\n                )\n                session.execute_write(drop_graph_projection)\n                session.execute_write(create_graph_proj)\n                session.execute_write(detect_community)\n                first_level_pred_cluster = session.execute_read(return_pred_cluster)\n                first_level_clustered_nodes = session.execute_read(get_clustered_nodes)\n                first_level_unclustered_nodes = session.execute_read(\n                    get_unclustered_nodes\n                )\n                cluster_article_count = session.execute_read(count_articles)\n    except (DriverError, Neo4jError) as e:\n        logging.error(f\"Neo4j error occurred: {e}\")\n        raise\n\n    first_level_cluster_size = get_cluster_size(\n        first_level_pred_cluster, column_name=\"cluster\"\n    )\n\n    min_count = cluster_article_count[cluster_article_count[\"article_count\"] > 1][\n        \"article_count\"\n    ].min()\n    max_count = cluster_article_count[\"article_count\"].max()\n    num_clusters = len(\n        cluster_article_count[cluster_article_count[\"article_count\"] != 1]\n    )\n    unclustered_count = (cluster_article_count[\"article_count\"] == 1).sum()\n\n    first_level_metrics = pd.DataFrame(\n        {\n            \"Threshold\": [threshold],\n            \"Title Weight\": [weight_title],\n            \"Category Weight\": [weight_cat],\n            \"Meta Description Weight\": [weight_desc],\n            \"Keywords Weight\": [weight_kws],\n            \"Content Body Weight\": [weight_body],\n            \"Combined Embeddings Weight\": [weight_combined],\n            \"Number of clusters\": [num_clusters],\n            \"Min cluster size\": [min_count],\n            \"Max cluster size\": [max_count],\n            \"Number of articles not clustered\": [unclustered_count],\n        }\n    )\n    return (\n        first_level_pred_cluster,\n        first_level_clustered_nodes,\n        first_level_unclustered_nodes,\n        first_level_metrics,\n        first_level_cluster_size,\n    )\n",
  "filepath": "content-optimization/src/content_optimization/pipelines/clustering/nodes.py",
  "parameters": {
    "neo4j_config": {
      "uri": "neo4j://localhost:7687",
      "database": "hh-articles"
    },
    "sim_weightage.weight_title": 0,
    "sim_weightage.weight_cat": 0,
    "sim_weightage.weight_desc": 0,
    "sim_weightage.weight_body": 0,
    "sim_weightage.weight_combined": 1,
    "sim_weightage.weight_kws": 0,
    "set_threshold": ""
  },
  "run_command": "kedro run --to-nodes='generate_clusters_node'",
  "inputs": [
    "merged_df_with_groundtruth",
    "params:neo4j_config",
    "params:sim_weightage.weight_title",
    "params:sim_weightage.weight_cat",
    "params:sim_weightage.weight_desc",
    "params:sim_weightage.weight_body",
    "params:sim_weightage.weight_combined",
    "params:sim_weightage.weight_kws",
    "params:set_threshold"
  ],
  "outputs": [
    "first_level_pred_cluster",
    "first_level_clustered_nodes",
    "first_level_unclustered_nodes",
    "first_level_metrics",
    "first_level_cluster_size"
  ]
}